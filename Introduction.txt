Time complexity 

Rate of increase in time with respect to input size

Rules for TC:
1) Always calculate Time complexity in worst case 
2) Avoid Constant values and Lower values 


Different types of Time complexity 

Big-Oh (worst case)(upperbound)
Theta
Omega  (best case)(lowerbound)

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Extraction of Digits 

Count Digits 
Reverse a Number
Check Palindrome 
Armstrong number 


----------------------------------------------
TC -> O(log(n))  SC -> O(1) 
Count digits :

from math import * 
def countDigits(num):
    return int(log10(num) + 1)
---------------------------------------------------

TC -> O(log(n))  SC -> O(1)
Check Palindrome 

num = n 
result = 0
while num >= 0:
    ld = num%10
    result = (result*10) + ld
    num = num // 10 
return n == result 

-----------------------------------------------------
TC -> O(log(n))  SC -> O(1)
Armstrong Number 

153 = 1^3 + 5^3 + 3^3 
    = 1 + 125 + 27
    = 153

1634 too 


n = 153 
num = n 
total = 0
nod = len(str(n))
while num >= 0 :
    ld = num %10
    total = total + (ld ** nod)
    num = num // 10
return total == n 

------------------------------------------------------

Print Factors / Divisors 

10 -> [1,2,5,10]
15 -> [1,3,5,10]
25 -> [1,5,25]
7 -> [1,7]
19 -> [1,19]

brute force 
TC -> O(n)  SC -> O(k)
result = []
for i in range(1,num+1):
    if num%i == 0:
        result.append(i)
return result 

better solution -> for a number n it will be divisible by any number before n/2 and n/2 after that it will be divisible by n itself 

TC -> O(n/2))  SC -> O(k)
result = 0
for i in range(1,num//2):
    if num%i ==0:
        result.append(i)
result.append(num)
return result 


optimal solution 
TC -> O(root(n)) + O(nlog(n))  SC -> O(k)
36 = [1,2,3,4,6,9,12,18,36]

1*36
2*18
3*12
4*9
6*6

from math import sqrt

result = []
for i in range(1,sqrt(num)+1):
    if num%i == 0 :
        result.append(i)
    if num // i != i :
        result.append(num//i)



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Hashing -> Frequency Map / Dictionary 

Method 1
TC -> O(n)  SC -> O(n)
nums = [5,6,7,7,8]
freq_map = dict() ya fir {}

for i in range(0,len(nums))
    if nums[i] in freq_map:
        freq_map[nums[i]] += 1
    else:
        freq_map[nums[i]] = 1

x=1
print(freq_map[x])


Method 2 -> .get() returns 0 if not forund 
TC -> O(1)  SC -> O(1) 
hash_map = {}
n = len(nums)
for i in range(0,n):
    hash_map[nums[i]] = hash_map.get(nums[i],0) + 1


    //                  hash_map.get(5,0) + 1 // 5 is not in dict
  //                    0+1 = 1


  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


  hashing in Python  (if only constraint is given)

  Constraint : 1 <= num <= 10
  Prestoring the values into some datastructure like List/Dict/Set and then fetching it 

  TC -> O(N+M)  SC -> O(1)
  hash_list = [0] * 11

  for num in n :
    hash_list[num] += 1
  

  for num in m:
    if num < 1 or num > 10:
        print(0)
    else:
        print(hash_list[num])

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


Factorial of a number -> Recursion 


def factorial(int n):
    num = n 
    if num == 1 or num == 0:
        return 1
    else:
        return num*factorial(num-1)


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Reverse Array -> Recursion 

def func(nums,left,right):
    if left >= right:
        return
    arr[left],arr[right]= arr[right],arr[left]
    func(arr,left+1,right-1)

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++=


Check Palindrome string -> Recursion 

Normal
def palindrome(s,left,right):
    n = len(s)
    left = 0
    right = n-1
    while left < right:
        if s[left] != s[right]:
            return False
        left += 1
        right -= 1
    return True


Recursion 
def palindrome(s,left,right):
    n = len(s)
    if left >= right:
        return True 
    if s[left] == s[right]:
        return palindrome(s,left+1,right-1)
    else:
        return False

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Fibonacci Number 

0 1 1 2 3 5 8 13 21 34
in leetcode :

class Solution:
    def func(num):
        if num == 0 or num == 1:
            return num 
        return func(num-1) + func(num-2)

    def fib(self,n:int) -> int:  //(given in leetcode)
        answer = self.func(n)
        return answer


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


Largest Element in Array 

largest = float("-inf")
n= len(nums)
for i in range(0,n):
    largest = max(largest,nums[i])
return largest


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


brute force
Second Largest Element in Array  O(n+n)

largest = float("-inf")
s_largest = float("-inf")
n = len(nums)

for i in range(0,n):
    largest = max(largest,nums[i])

for i in range(0,n):
    if nums[i] > s_largest and nums[i] != largest :
        s_largest = nums[i]

return s_largest


optimal O(n)

largest = float("-inf")
s_largest = float("-inf")

for i in range(0,n):
    if nums[i] > largest:
        s_largest = largest
        largest = nums[i]
    elif nums[i] > s_largest and nums[i] != largest:
        s_largest = nums[i]

return s_largest 

_+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


Check if the array is sorted 

n = len(nums)

for i in range(0,n-1):
    if nums[i] > nums[i+1]:
        return False 

return True 

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Remove Duplicates from sorted array 

Brute force  O(2n)


n = len(nums)

freq_map = {}
for i in range(0,n):
    freq_map[nums[i]] = 0

j = 0

for k in freq_map:
    nums[j] = k
    j +=1
return j


Optimal solution  two pointer approach  O(n)

n = len(nums)

if n == 1:
    return 1

i = 0
j = i+1
while j < n:
    if nums[j] != nums[i]:
        i += 1
        nums[i],nums[j] = nums[j],nums[i]
    j += 1
return i+1

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Right Rotate array by 1 place 

        0  1 2 3 4 5  6 7
nums = [5,-2,3,9,0,6,10,7]
       -8 -7 -6 -5 -4 -3 -2 -1 


       nums[:] --> same list 

       nums --> diff list 
        Brute force O(n)
       nums[:] = nums[-1] + nums[0:n-1] or nums[n-1] + nums[0:n-1]

again O(n)
temp = nums[n-1]  
for i in range(n-2,-1,-1):
    nums[i+1] = nums[i]

nums[0] = temp

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++==

Leetcode - Right Rotate by K place 

Brute   (if we use _ we are not going to use that variable anywhere) O(n^2)

n = len(nums)
rotations = k%n

for _ in range(0,rotations):
    e = nums.pop()
    nums.insert(0,e)

Better Soln (Slicing) O(n)
n = len(nums)
k=n%k
nums[:] = nums[n-k:] + nums[:n-k]


Optimal Soln O(n)

def reverse(nums,left,right):
    while left < right:
        nums[left],nums[right] = nums[right],nums[left]
        left +=1
        right -=1
    
reverse(n-k,n-1) # Reverse last K numbers 
reverse(0,n-k-1) # reverse remaining elements 
reverse(0,n-1) # reverse whole array


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

O(n) - Optimal soln 
Move Zeroes to end of the list 

if len(nums) == 1:
    return

i = 0
while i<len(nums):
    if nums[i] == 0:
        break
    i+=1

if i == len(nums):
    return 

j = i+1

while j < len(nums):
    if nums[j] != 0:
        nums[i],nums[j]=nums[j],nums[i]
        i+=1
    j+=1
